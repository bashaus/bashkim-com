@import "~@bashkim-com/style-guide/media.scss";

@import "./design";

@mixin grid-container-center($breakpoints: $media-breakpoints) {
  @each $breakpoint in $breakpoints {
    $breakpoint-design: map.get($grid-design, $breakpoint);

    @if map.has-key($breakpoint-design, gutter) {
      @media #{map.get($breakpoint-design, query)} {
        margin-left: auto;
        margin-right: auto;
      }
    }
  }
}

@mixin grid-container-max-width($breakpoints: $media-breakpoints) {
  @each $breakpoint in $breakpoints {
    $breakpoint-design: map.get($grid-design, $breakpoint);

    @if map.has-key($breakpoint-design, max-width) {
      @media #{map.get($breakpoint-design, query)} {
        max-width: #{map.get($breakpoint-design, max-width)};
      }
    }
  }
}

@mixin grid-container-gutter($breakpoints: $media-breakpoints) {
  @each $breakpoint in $breakpoints {
    $breakpoint-design: map.get($grid-design, $breakpoint);

    @if map.has-key($breakpoint-design, gutter) {
      @media #{map.get($breakpoint-design, query)} {
        grid-gap: #{map.get($breakpoint-design, gutter)};
      }
    }
  }
}

@mixin grid-container-margin(
  $breakpoints: $media-breakpoints,
  $sides: top bottom
) {
  @each $breakpoint in $breakpoints {
    $breakpoint-design: map.get($grid-design, $breakpoint);

    @if map.has-key($breakpoint-design, margin) {
      @media #{map.get($breakpoint-design, query)} {
        @if list.index($sides, top) {
          margin-top: map.get($breakpoint-design, margin);
        }

        @if list.index($sides, left) {
          margin-left: map.get($breakpoint-design, margin);
        }

        @if list.index($sides, right) {
          margin-right: map.get($breakpoint-design, margin);
        }

        @if list.index($sides, bottom) {
          margin-bottom: map.get($breakpoint-design, margin);
        }
      }
    }
  }
}

@mixin grid-container-padding(
  $breakpoints: $media-breakpoints,
  $sides: left right
) {
  @each $breakpoint in $breakpoints {
    $breakpoint-design: map.get($grid-design, $breakpoint);

    @if map.has-key($breakpoint-design, gutter) {
      @media #{map.get($breakpoint-design, query)} {
        @if list.index($sides, top) {
          padding-top: map.get($breakpoint-design, margin);
        }

        @if list.index($sides, left) {
          padding-left: map.get($breakpoint-design, margin);
        }

        @if list.index($sides, right) {
          padding-right: map.get($breakpoint-design, margin);
        }

        @if list.index($sides, bottom) {
          padding-bottom: map.get($breakpoint-design, margin);
        }
      }
    }
  }
}

@mixin grid-container-bounds(
  $breakpoints: $media-breakpoints,
  $margin: top bottom,
  $padding: left right
) {
  @include grid-container-center($breakpoints: $breakpoints);
  @include grid-container-max-width($breakpoints: $breakpoints);
  @include grid-container-gutter($breakpoints: $breakpoints);
  @include grid-container-margin($breakpoints: $breakpoints, $sides: $margin);
  @include grid-container-padding($breakpoints: $breakpoints, $sides: $padding);
}

@mixin grid-container(
  $columns: 12,
  $breakpoints: $media-breakpoints,
  $margin: top bottom,
  $padding: left right
) {
  display: grid;
  grid-template-columns: repeat(#{$columns}, 1fr);
  @include grid-container-bounds(
    $breakpoints: $breakpoints,
    $margin: $margin,
    $padding: $padding
  );
}
